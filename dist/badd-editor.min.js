/**
 * bootstrap
 *
 * @author Bruno Krebs
 * @url https://github.com/brunokrebs/badd-editor
 * @license MIT License <http://opensource.org/licenses/mit-license.php>
 */
(function() {
	var editorModule = angular.module('baddEditor', []);

	var editorController = function($scope, $window) {
		// if attr are not set, use default values
		$scope.title = angular.isDefined($scope.title) ? $scope.title : 'Bootstrap visual editor';
		$scope.componentsTitle = angular.isDefined($scope.componentsTitle) ? $scope.componentsTitle : 'Components';
		$scope.propertiesTitle = angular.isDefined($scope.propertiesTitle) ? $scope.propertiesTitle : 'Properties';


		$window.addEventListener('message', function() {
			alert('received something');
		});
	};
	editorController.$inject = ['$scope', '$window'];

	var editorDirective = function () {
		return {
			restrict: 'E',
			templateUrl: 'badd-editor.html',
			scope: {
				title: '@',
				componentsTitle: '@',
				propertiesTitle: '@',
				template: '@'
			},
			controller: editorController
		};
	};

	editorModule.directive('baddEditor', editorDirective);
}());

(function () {
	var editorModule = angular.module('baddEditor');

	var baddDraggableDirective = function () {
		return {
			restrict: 'A',
			link: function (scope, element) {
				element.draggable({
					revert: false,
					helper: 'clone',
					iframeFix: true,
					drag: function () {
						$(this).addClass("drag-active");
						$(this).closest(element).addClass("drag-active");
					},
					stop: function (event, ui) {
						$(this).removeClass("drag-active").closest(element).removeClass("drag-active");
						var droppedEl = angular.element(ui.droppable);
					}
				});
			}
		}
	};

	editorModule.directive('baddDraggable', baddDraggableDirective);
}());
(function() {
	var editorModule = angular.module('baddEditor');

	var baddDroppableFrameDirective = function($compile) {
		return {
			restrict: 'E',
			scope: {
				template: '@'
			},
			replace: true,
			template: '<iframe class="browser"></iframe>',
			link: function (scope, element, attrs) {
				if (element.prop('tagName') !== 'IFRAME') {
					return;
				}

				element.attr('src', attrs.template);
				element.load(function () {
					// start baddEditor module
					var pageHtml = element.contents().find('html');
					pageHtml.attr('ng-app', 'baddEditor');

					// give editable style to editable page
					var pageHead = pageHtml.find('head');
					pageHead.append('<link rel="stylesheet" href="badd-editor-frame.min.css" type="text/css" />');

					// enable controller on body
					var pageBody = pageHtml.find('body');
					pageBody.attr('badd-droppable', '');
					pageBody.attr('ng-controller', 'editablePageController as ctrl');

					// make divs droppable and configurable
					var pageDivs = pageBody.find('div');
					pageDivs.attr('badd-droppable', '');
					pageDivs.attr('ng-click', 'ctrl.sendMessage()');

					$compile(pageHtml)(scope);
				});
			}
		}
	};
	baddDroppableFrameDirective.$inject = ['$compile'];

	editorModule.directive('baddDroppableFrame', baddDroppableFrameDirective);

	var editablePageController = function($window) {
		var ctrl = this;

		ctrl.message = 'Hello darling';

		ctrl.sendMessage = function() {
			$window.postMessage(ctrl.message, '*');
		};
	};
	editablePageController.$inject = ['$window'];
	editorModule.controller('editablePageController', editablePageController);
}());
(function () {
	var editorModule = angular.module('baddEditor');

	var baddDroppableDirective = function ($compile) {
		var dir = this;

		dir.objectEntering = function(event, object) {
			var position = $(this).offset();
			var width = $(this).outerWidth();
			var height = $(this).outerHeight();

			var body = $(this).parents('body');
			body.append('<div class="badd-highlighter" style="position: fixed; top: ' + position.top +
				'px ; left: ' + position.left +
				'px ; width: ' + width + 'px; height: ' + height + 'px; border: 2px dashed lightskyblue;" />');
		};

		dir.objectLeaving = function(event) {
			var body = $(event.target).parents('body');
			body.find('.badd-highlighter').remove();
		};

		dir.objectDropped = function(scope) {
			return function (event, ui) {
				var rawHtml = angular.element(ui.draggable).data('raw');
				var draggedEl = angular.element(ui.draggable);
				var droppedEl = angular.element(this);
				if (rawHtml == undefined) {
					rawHtml = $(draggedEl)[0].outerHTML;
				}
				$compile(rawHtml)(scope).appendTo(droppedEl);

				dir.objectLeaving(event);
			}
		};

		return {
			restrict: 'A',
			link: function (scope, element, attrs) {
				var greedy = attrs.greedy;
				if (greedy == undefined) {
					greedy = true;
				}
				element.droppable({
					activeClass: 'drop-active',
					greedy: greedy,
					hoverClass: 'drop-hover',
					iframeFix: true,
					tolerance: 'intersect',
					over: dir.objectEntering,
					out: dir.objectLeaving,
					drop: dir.objectDropped(scope)
				});
			}
		}
	};
	baddDroppableDirective.$inject = ['$compile'];

	editorModule.directive('baddDroppable', baddDroppableDirective);
}());
angular.module("baddEditor").run(["$templateCache", function($templateCache) {$templateCache.put("badd-editor.html","<table class=\"badd-editor\">\n	<tr>\n		<td class=\"badd-editor-header\" colspan=\"3\">\n			<div class=\"col-xs-12\">\n				<p class=\"title\">{{title}}</p>\n			</div>\n		</td>\n	</tr>\n	<tr>\n		<td class=\"badd-editor-components\">\n			<div class=\"components\">\n				<p class=\"title\">{{componentsTitle}}</p>\n				<ul>\n					<li badd-draggable data-raw=\"<button class=\'btn btn-primary\' style=\'float: right\' badd-draggable>New Button</button>\">\n						<div>\n							<img src=\"btn.png\" /> <span>Button</span><i class=\"fa fa-arrows-alt\"></i>\n						</div>\n					</li>\n				</ul>\n			</div>\n		</td>\n		<td class=\"badd-editor-browser\">\n			<badd-droppable-frame template=\"{{template}}\"></badd-droppable-frame>\n		</td>\n		<td class=\"badd-editor-properties\">\n			<div class=\"properties\">\n				<p class=\"title\">{{propertiesTitle}}</p>\n				hi\n			</div>\n		</td>\n	</tr>\n</table>");}]);