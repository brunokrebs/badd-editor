(function() {
	var editorModule = angular.module('baddEditor', []);

	var editorController = function($scope, editorService) {
		$scope.pageTitleChanged = function() {
			editorService.changePageTitle($scope.pageTitle);
		};

		// if attr are not set, use default values
		$scope.componentsTitle = angular.isDefined($scope.componentsTitle) ? $scope.componentsTitle : 'Components';

		// default draggable components
		$scope.draggables = [
			{ title: 'Container', icon:'fa-square-o', element: '<div class="container"><div class="row">' +
				'<div class="col-xs-12"><p>A simple row with a single column</p></div></div></div>' },
			{ title: 'Row', icon:'fa-align-justify', element: '<div class="row"><div class="col-xs-12">' +
				'<p>A simple row with a single column</p></div></div>' },
			{ title: 'Column', icon:'fa-columns', element: '<div class="col-xs-12">' +
				'<p>You can make me a smaller column</p></div>' },
			{ title: 'Header 1', icon:'fa-header', element: '<h1>An important title</h1>' },
			{ title: 'Paragraph', icon:'fa-align-left', element: '<p>Write something useful here</p>' },
			{ title: 'Button', icon:'fa-plus-square', element: '<btn class="btn btn-primary">My brand ' +
				'new button</btn>' },
			{ title: 'Image', icon:'fa-picture-o', element: '<img ' +
				'src="http://www.avjobs.com/images/v_png_v5/v_collection_png/256x256/shadow/airplane2.png"' +
				'alt="airplane">' }
		];

		$scope.buttons = [
			{ label: 'Arial', tooltip: 'Font', icon: 'caret' },
			{ label: '11', tooltip: 'Font size', icon: 'fa fa-caret-down', separate: 'btn-separate' },
			{ label: '', tooltip: 'Bold', icon: 'fa fa-bold', action: editorService.bold },
			{ label: '', tooltip: 'Italic', icon: 'fa fa-italic' },
			{ label: '', tooltip: 'Underline', icon: 'fa fa-underline', separate: 'btn-separate' },
			{ label: 'F', tooltip: '', icon: 'Font color' },
			{ label: '', tooltip: 'Background color', icon: 'fa fa-square', separate: 'btn-separate' },
			{ label: '', tooltip: 'Align left', icon: 'fa fa-align-left', action: editorService.alignLeft },
			{ label: '', tooltip: 'Align center', icon: 'fa fa-align-center', action: editorService.alignCenter },
			{ label: '', tooltip: 'Align right', icon: 'fa fa-align-right', action: editorService.alignRight },
			{ label: '', tooltip: 'Justify', icon: 'fa fa-align-justify', separate: 'btn-separate', action: editorService.justify },
			{ label: '', tooltip: 'Ordered list', icon: 'fa fa-list-ol', action: editorService.orderedList },
			{ label: '', tooltip: 'Unordered list', icon: 'fa fa-list-ul', action: editorService.unorderedList }
		];

		$scope.execute = function(action) {
			editorService.executeAction(action);
		}
	};
	editorController.$inject = ['$scope', 'editorService'];

	var editorDirective = function (editorService) {
		return {
			restrict: 'E',
			templateUrl: 'badd-editor.html',
			scope: {
				title: '@',
				componentsTitle: '@',
				template: '@'
			},
			controller: editorController,
			link: function (scope, element, attrs) {
				var iframe = element.find('iframe');

				iframe.attr('src', attrs.template);
				iframe.on('load', editorService.initializeFrame(iframe, scope));
			}
		};
	};
	editorDirective.$inject = ['editorService'];
	editorModule.directive('baddEditor', editorDirective);

	var editorService = function(baddDragDropService, $compile, $document, $window) {
		var service = this;

		service.editableTags = [
			'H1',
			'H2',
			'H3',
			'H4',
			'H5',
			'H6',
			'H7',
			'P',
			'B',
			'A',
			'UL',
			'OL',
			'LI',
			'BTN'
		];

		service.initializeFrame = function(frame, scope) {
			return function () {
				service.document = $document[0];
				service.iframe = frame[0];

				baddDragDropService.setupWindow($window);

				// helper listener
				$window.addEventListener("click", windowClickListener);

				// set service properties with raw dom html5 element
				service.iframePosition = service.iframe.getBoundingClientRect();
				service.iframeDocument = service.iframe.contentDocument;
				service.iframeDocument.addEventListener("keyup", function() {
					service.hideHighlightBorder();
					service.updateSelectedHighlightBorderPosition();
				});
				service.iframeDocument.addEventListener("scroll", function() {
					service.updateHighlightBorderPosition();
					service.updateSelectedHighlightBorderPosition();
				});
				service.frameHtml = service.iframeDocument.querySelector('html');
				service.frameHead = service.iframeDocument.querySelector('head');
				service.frameBody = service.iframeDocument.querySelector('body');

				// page title
				service.pageTitle = service.iframeDocument.querySelector('title');
				if (!service.pageTitle) {
					service.pageTitle = service.document.createElement('title');
				} else {
					scope.$apply(function () {
						scope.pageTitle = service.pageTitle.textContent;
					});
				}

				// create transfer area
				service.transferArea = service.document.createElement('div');
				service.transferArea.className = 'badd-transfer-area';
				service.frameBody.appendChild(service.transferArea);

				// create droppable area highlighter
				service.transferArea.innerHTML = '<svg class="badd-highlighter badd-avoid-dd"></svg>';
				service.highlightBorder = service.transferArea.childNodes[0];
				service.frameBody.appendChild(service.highlightBorder);

				// create selected area highlighter
				service.transferArea.innerHTML = '<svg class="badd-selected-highlighter badd-avoid-dd"></svg>';
				service.selectedHighlightBorder = service.transferArea.childNodes[0];
				service.frameBody.appendChild(service.selectedHighlightBorder);

				// start baddEditor module
				service.frameHtml.setAttribute('ng-app', 'baddEditor');

				// give editable style to editable page
				addStylesheet(service.iframeDocument, 'badd-editor-frame.min.css');

				// enable controller on body
				service.frameBody.setAttribute('badd-droppable', '');
				service.frameBody.setAttribute('badd-configurable', '');

				// make everything draggable and configurable, divs are also droppable
				var elements = _.toArray(service.frameBody.querySelectorAll('*'));
				elements.forEach(configureDirectivesOnElementAndChildren);

				service.scope = scope;
				$compile(service.frameHtml)(scope);
			};
		};

		service.changePageTitle = function(newTitle) {
			service.pageTitle.textContent = newTitle;
		};

		function addStylesheet(targetDocument, stylesheet) {
			var stylesheetElement = targetDocument.createElement('link');
			stylesheetElement.setAttribute('rel', 'stylesheet');
			stylesheetElement.setAttribute('href', stylesheet);
			stylesheetElement.setAttribute('type', 'text/css');
			targetDocument.querySelector('head').appendChild(stylesheetElement);
		}

		function configureDirectivesOnElementAndChildren(element) {
			if (!_.contains(element.classList, 'badd-avoid-dd')) {

				if (element.tagName === 'DIV' && element.getAttribute('badd-droppable') !== '') {
					element.setAttribute('badd-droppable', '');
				}

				if (element.getAttribute('badd-draggable') !== '') {
					element.setAttribute('badd-draggable', '');
					element.setAttribute('badd-configurable', '');
				}

				var elements = _.toArray(element.querySelectorAll('*'));
				elements.forEach(configureDirectivesOnElementAndChildren);
			}
		}

		service.startDragging = function (event) {
			event.dataTransfer.setData('text', 'firefox needs data');

			if (event.target.getAttribute('badd-configurable') === '') {
				service.previewElement = event.target;
				service.hideSelectedHighlightBorder();
			} else {
				service.transferArea.innerHTML = event.target.getAttribute('data-element');
				service.previewElement = service.transferArea.querySelector('*');
			}
		};

		service.stopDragging = function(event) {
			service.transferArea.innerHTML = '';
			if (service.previewElement && service.previewElement.parentNode) {
				service.previewElement.parentNode.removeChild(service.previewElement);
				service.previewElement = null;
			}
			service.hideHighlightBorder();
		};

		service.elementEntering = function(event) {
			service.previewElement.classList.remove('badd-hidden-preview-element');

			event.stopPropagation();
			event.preventDefault();
		};

		service.elementLeaving = function (event) {
			var elementBeingHovered = service.document.elementFromPoint(event.clientX + service.iframePosition.left,
																		event.clientY + service.iframePosition.top);
			if (elementBeingHovered == null || elementBeingHovered.tagName !== 'IFRAME' ||
				! _.contains(elementBeingHovered.classList, 'badd-editor-browser')) {

				service.previewElement.classList.add('badd-hidden-preview-element');
				service.hideHighlightBorder();
			}
		};

		service.elementHovering = function(event) {
			event.stopPropagation();
			event.preventDefault();

			if (!event.target.getAttribute
				|| event.target === service.previewElement
				|| event.target.getAttribute('badd-droppable') !== '') {

				return;
			}

			var children = _.toArray(event.target.childNodes);
			var nearestSibling = null;
			var nearestSiblingPosition = null;
			children.forEach(function(child) {
				if (!child.getBoundingClientRect
					|| _.contains(event.target.classList, 'badd-avoid-dd')
					|| child == service.previewElement) {

					//this does not break. _.each will run the whole array
					return;
				}

				var childPosition = child.getBoundingClientRect();

				var childCenter = {
					X: childPosition.width / 2 + childPosition.left,
					Y: childPosition.height / 2 + childPosition.top
				};

				var belowThreshold = childCenter.Y;
				if (belowThreshold - childPosition.top > 30) {
					// no need to be so greedy
					belowThreshold = childPosition.top + 30;
				}

				var besidesThreshold = childCenter.X;
				if (besidesThreshold - childPosition.left > 30) {
					// no need to be so greedy
					besidesThreshold = childPosition.left + 30;
				}

				if ((event.clientY > belowThreshold && event.clientX > besidesThreshold)
					|| (event.clientY > childPosition.bottom)){
					//this does not break. _.each will run the whole array
					return;
				}

				if (nearestSibling == null) {
					nearestSibling = child;
					nearestSiblingPosition = childPosition;
				} else if (nearestSiblingPosition.left >= childPosition.left
							&& nearestSiblingPosition.top >= childPosition.top) {
					nearestSibling = child;
					nearestSiblingPosition = childPosition;
				}
			});

			if (nearestSibling) {
				event.target.insertBefore(service.previewElement, nearestSibling);
			} else {
				event.target.appendChild(service.previewElement);
			}
			service.showHighlightBorder(event.target);
		};

		service.elementDropped = function(event) {
			event.stopPropagation();
			event.preventDefault();

			configureDirectivesOnElementAndChildren(service.previewElement);
			$compile(service.previewElement)(service.scope);

			service.previewElement = null;
		};

		service.updateHighlightBorderPosition = function() {
			if (service.highlightBorder.style.display === 'block' && service.lastHoveredTarget) {
				service.showHighlightBorder(service.lastHoveredTarget);
			}
		};

		service.showHighlightBorder = function(target) {
			var targetPosition = target.getBoundingClientRect();
			service.highlightBorder.style.top = targetPosition.top - 3 + 'px';
			service.highlightBorder.style.left = targetPosition.left - 3 + 'px';
			service.highlightBorder.style.width = target.offsetWidth + 6 + 'px';
			service.highlightBorder.style.height = target.offsetHeight + 6 + 'px';
			service.highlightBorder.style.display = 'block';
			service.lastHoveredTarget = target;
		};

		service.showSelectedHighlightBorder = function(target) {
			service.lastSelectedElement = target;
			var targetPosition = target.getBoundingClientRect();
			service.selectedHighlightBorder.style.top = targetPosition.top - 3 + 'px';
			service.selectedHighlightBorder.style.left = targetPosition.left - 3 + 'px';
			service.selectedHighlightBorder.style.width = target.offsetWidth + 6 + 'px';
			service.selectedHighlightBorder.style.height = target.offsetHeight + 6 + 'px';
			service.selectedHighlightBorder.style.display = 'block';
		};

		service.hideSelectedHighlightBorder = function() {
			service.lastSelectedElement = null;
			service.selectedHighlightBorder.style.display = 'none';
			service.selectedHighlightBorder.style.top = 0;
			service.selectedHighlightBorder.style.left = 0;
			service.selectedHighlightBorder.style.width = 0;
			service.selectedHighlightBorder.style.height = 0;
		};

		service.updateSelectedHighlightBorderPosition = function() {
			if (service.lastSelectedElement) {
				service.showSelectedHighlightBorder(service.lastSelectedElement);
			}
		};

		service.hideHighlightBorder = function() {
			service.highlightBorder.style.display = 'none';
			service.highlightBorder.style.top = 0;
			service.highlightBorder.style.left = 0;
			service.highlightBorder.style.width = 0;
			service.highlightBorder.style.height = 0;
		};

		service.mouseHovering = function(event) {
			event.stopPropagation();
			event.preventDefault();

			if (!_.contains(event.target.classList, 'badd-avoid-dd')
				&& ! belongsTo(event.target, service.elementBeingEdited)) {
				service.showHighlightBorder(event.target);
			}
		};

		service.mouseClick = function(event) {
			event.preventDefault();

			if (event.target === service.lastSelectedElement && service.elementBeingEdited == null) {
				service.hideSelectedHighlightBorder();
				event.stopPropagation();
				return;
			}

			if (belongsTo(event.target, service.elementBeingEdited) || service.elementBeingEdited == event.target) {
				return;
			}

			event.stopPropagation();

			if (service.elementBeingEdited && service.elementBeingEdited !== event.target) {
				var parent = service.elementBeingEdited.parentNode;
				while (parent.tagName != 'BODY') {
					if (parent.getAttribute('badd-draggable') || parent.getAttribute('draggable')) {
						parent.setAttribute('draggable', 'true');
					}
					parent = parent.parentNode;
				}

				service.selectedHighlightBorder.setAttribute('class', 'badd-selected-highlighter badd-avoid-dd');
				service.elementBeingEdited.removeAttribute('contentEditable');
				service.elementBeingEdited = null;
			}
			service.showSelectedHighlightBorder(event.target);
		};

		service.mouseDoubleClick = function(event) {
			event.stopPropagation();

			if (event.target === service.elementBeingEdited || belongsTo(event.target, service.elementBeingEdited)) {
				return;
			}

			event.preventDefault();

			// only a few elements are content editable, e.g. divs are not, text should be placed on p elements
			if (_.contains(service.editableTags, event.target.tagName)
				&& ! belongsTo(event.target, service.elementBeingEdited)) {

				service.elementBeingEdited = event.target;

				// disable dragging during edition
				service.elementBeingEdited.setAttribute('draggable', 'false');
				var parent = service.elementBeingEdited.parentNode;
				while (parent.tagName != 'BODY') {
					if (parent.getAttribute('badd-draggable') || parent.getAttribute('draggable')) {
						parent.setAttribute('draggable', 'false');
					}
					parent = parent.parentNode;
				}

				// update highlights
				service.hideHighlightBorder();
				service.showSelectedHighlightBorder(service.elementBeingEdited);
				service.selectedHighlightBorder.setAttribute('class', 'badd-selected-highlighter ' +
					'badd-avoid-dd badd-edition-mode');

				// make target editable
				service.elementBeingEdited.contentEditable = true;

				var selection = service.iframe.contentWindow.getSelection();
				service.iframe.contentWindow.focus();
				selection.collapse(service.elementBeingEdited, 0);
				service.elementBeingEdited.focus();
			}
		};

		function windowClickListener(event) {
			event.stopPropagation();
			event.preventDefault();

			service.hideSelectedHighlightBorder();
		}

		function belongsTo(child, parent) {
			if (child == null || parent == null || child === parent) {
				return false;
			}
			var nextParent = child.parentNode;
			while (nextParent != null) {
				if (nextParent === parent) {
					return true;
				}
				nextParent = nextParent.parentNode;
			}
			return false;
		}

		service.mouseLeaving = function(event) {
			event.stopPropagation();
			event.preventDefault();

			service.hideHighlightBorder();
		};

		service.executeAction = function(action) {
			if (service.lastSelectedElement == null && service.elementBeingEdited == null) {
				return;
			}
			enableDesignMode();

			if (service.elementBeingEdited == null) {
				var selection = service.iframeDocument.defaultView.getSelection();
				var range = service.iframeDocument.createRange();
				range.setStart(service.lastSelectedElement, 0);
				range.setEnd(service.lastSelectedElement, 0);
				selection.removeAllRanges();
				selection.addRange(range);
			}

			action();
			disableDesignMode();
		};

		function enableDesignMode() {
			if (isIE11()) return;
			service.iframeDocument.designMode = 'on';
			service.iframeDocument.execCommand("StyleWithCSS", false, true);
		}

		function disableDesignMode() {
			if (isIE11()) return;
			service.iframeDocument.designMode = 'off';
		}

		function isIE11() {
			if (service.ie11 == null) {
				service.ie11 = !(window.ActiveXObject) && "ActiveXObject" in window;
			}
			return service.ie11;
		}

		service.alignLeft = function() {
			service.iframeDocument.execCommand('justifyleft', false);
		};

		service.alignRight = function() {
			service.iframeDocument.execCommand('justifyright', false);
		};

		service.alignCenter = function() {
			service.iframeDocument.execCommand('justifyCenter', false);
		};

		service.justify = function() {
			service.iframeDocument.execCommand('justifyfull', false);
		};

		service.bold = function() {
			service.iframeDocument.execCommand('bold', false);
		};

		service.orderedList = function() {
			service.iframeDocument.execCommand('insertOrderedList', false);
		};

		service.unorderedList = function() {
			service.iframeDocument.execCommand('insertUnorderedList', false);
		};
	};
	editorService.$inject = ['baddDragDropService', '$compile', '$document', '$window'];
	editorModule.service('editorService', editorService);
}());

(function () {
	var editorModule = angular.module('baddEditor');

	var baddConfigurableDirective = function ($compile, editorService) {
		return {
			restrict: 'A',
			link: function (scope, element) {
				var configurableDom = element[0];
				configurableDom.addEventListener("mouseover", editorService.mouseHovering);
				configurableDom.addEventListener("click", editorService.mouseClick);
				configurableDom.addEventListener("dblclick", editorService.mouseDoubleClick);
				configurableDom.addEventListener("mouseout", editorService.mouseLeaving);
			}
		}
	};
	baddConfigurableDirective.$inject = ['$compile', 'editorService'];

	editorModule.directive('baddConfigurable', baddConfigurableDirective);
}());
(function() {
	var editorModule = angular.module('baddEditor');

	var baddDragDropService = function() {
		var service = this;
		service.mainWindow = null;

		service.setupWindow = function(window) {
			if (service.mainWindow != null) {
				return;
			}

			// defining shortcuts to editor's window, document and body
			service.mainWindow = window;
			service.mainDocument = service.mainWindow.document;
			service.mainBody = service.mainDocument.querySelector('body');

			// defining shortcuts to editor's iframe window and document
			service.iframe = service.mainDocument.querySelector('iframe.badd-editor-browser');
			service.iframeWindow = service.iframe.contentWindow;
			service.iframeDocument = service.iframeWindow.document;

			// adding mouse event handlers for both windows (main's and iframe's)
			service.mainWindow.addEventListener('mousedown', startDragging);
			service.mainWindow.addEventListener('mouseup', stopDragging);
			service.mainWindow.addEventListener('mousemove', updateDraggableIcon);
			service.mainWindow.addEventListener('blur', focusLost);
			service.iframeWindow.addEventListener('mousedown', startDragging);
			service.iframeWindow.addEventListener('mouseup', stopDragging);
			service.iframeWindow.addEventListener('mousemove', updateDraggableIcon);

			// adding conteiner to hold our pointer icon
			service.draggableConteiner = service.mainDocument.createElement('svg');
			service.draggableConteiner.className = 'badd-draggable-conteiner';
			service.mainBody.appendChild(service.draggableConteiner);
		};

		function startDragging(event) {
			event.preventDefault();

			var draggableElement = event.target;
			if (draggableElement.getAttribute('badd-draggble-label') != null) {
				while (draggableElement.getAttribute('badd-draggable') == null) {
					draggableElement = draggableElement.parentNode;
				}
			}

			if (draggableElement.getAttribute('badd-draggable') == null) {
				return;
			}

			service.draggableConteiner.appendChild(draggableElement.querySelector('i').cloneNode(true));
			service.draggableIcon = service.draggableConteiner.childNodes[0];
			service.draggableIcon.style.position = 'fixed';
			service.draggableIcon.style.fontSize = '30px';
			service.draggableIcon.style.backgroundColor = '#2385DC';
			service.draggableIcon.style.border = '1px solid #999';
			service.draggableIcon.style.color = '#fff';
			service.draggableIcon.style.padding = '10px';
			service.draggableIcon.style.left = (event.pageX + 10) + 'px';
			service.draggableIcon.style.top = (event.pageY - 100) + 'px';
			service.draggableIcon.style.zIndex = 16777220;
		}

		function stopDragging(event) {
			event.preventDefault();
			//service.draggableConteiner.innerHTML = '';
			//service.draggableIcon = null;
		}

		function updateDraggableIcon(event) {
			if (!service.draggableIcon) {
				return;
			}

			service.draggableIcon.style.left = (event.pageX + 10) + 'px';
			service.draggableIcon.style.top = (event.pageY - 60) + 'px';
		}

		function focusLost() {
			event.preventDefault();
		}

		function gotFocus() {
			event.preventDefault();
		}
	};
	editorModule.service('baddDragDropService', baddDragDropService);
}());
angular.module("baddEditor").run(["$templateCache", function($templateCache) {$templateCache.put("badd-editor.html","<div class=\"badd-editor-browser-frame\">\n	<div class=\"badd-editor-browser-header\">\n		<div class=\"badd-editor-browser-header-close\"></div>\n		<div class=\"badd-editor-browser-header-min\"></div>\n		<div class=\"badd-editor-browser-header-max\"></div>\n	</div>\n	<div class=\"badd-editor-browser-address\">\n		<div class=\"badd-editor-browser-address-undo-redo\">\n			<div class=\"badd-editor-browser-address-return\">\n				<i class=\"fa fa-arrow-left\"></i>\n			</div>\n			<div class=\"badd-editor-browser-address-redo\">\n				<i class=\"fa fa-arrow-right\"></i>\n			</div>\n		</div>\n		<div class=\"badd-editor-browser-address-page-title\">\n			<input type=\"text\" class=\"form-control\" placeholder=\"Page title\"\n				   ng-model=\"pageTitle\" ng-change=\"pageTitleChanged()\">\n		</div>\n	</div>\n	<div class=\"badd-editor-dragglable-components\">\n		<p class=\"badd-editor-title\">{{componentsTitle}}</p>\n		<ul>\n			<li ng-repeat=\"draggable in draggables\" data-element=\"{{draggable.element}}\" badd-draggable>\n				<i class=\"fa {{draggable.icon}}\" badd-draggble-label></i>\n				<span class=\"badd-editor-title\" badd-draggble-label>{{draggable.title}}</span>\n			</li>\n		</ul>\n	</div>\n	<div class=\"badd-editor-browser-configuration\">\n		<button ng-repeat=\"button in buttons\" type=\"button\" title=\"{{button.tooltip}}\"\n				class=\"btn btn-default\" ng-class=\"button.separate\"\n				ng-click=\"execute(button.action)\">\n			{{button.label}} <i class=\"{{button.icon}}\"></i>\n		</button>\n	</div>\n	<iframe class=\"badd-editor-browser\"></iframe>\n	<div class=\"badd-editor-browser-footer\"></div>\n</div>");}]);
(function() {
	var tinyEditorService = function() {
		var service = this;

		service.frameWindow = null;
		service.frameDocument = null;
		service.textArea = null;

		var controls = [];
		var offset = -30;

		// controls
		controls['cut'] = [1, 'Cut', 'a', 'cut'];
		controls['copy'] = [2, 'Copy', 'a', 'copy'];
		controls['paste'] = [3, 'Paste', 'a', 'paste'];
		controls['bold'] = [4, 'Bold', 'a', 'bold'];
		controls['italic'] = [5, 'Italic', 'a', 'italic'];
		controls['underline'] = [6, 'Underline', 'a', 'underline'];
		controls['strikethrough'] = [7, 'Strikethrough', 'a', 'strikethrough'];
		controls['subscript'] = [8, 'Subscript', 'a', 'subscript'];
		controls['superscript'] = [9, 'Superscript', 'a', 'superscript'];
		controls['orderedlist'] = [10, 'Insert Ordered List', 'a', 'insertorderedlist'];
		controls['unorderedlist'] = [11, 'Insert Unordered List', 'a', 'insertunorderedlist'];
		controls['outdent'] = [12, 'Outdent', 'a', 'outdent'];
		controls['indent'] = [13, 'Indent', 'a', 'indent'];
		controls['leftalign'] = [14, 'Left Align', 'a', 'justifyleft'];
		controls['centeralign'] = [15, 'Center Align', 'a', 'justifycenter'];
		controls['rightalign'] = [16, 'Right Align', 'a', 'justifyright'];
		controls['blockjustify'] = [17, 'Block Justify', 'a', 'justifyfull'];
		controls['undo'] = [18, 'Undo', 'a', 'undo'];
		controls['redo'] = [19, 'Redo', 'a', 'redo'];
		controls['image'] = [20, 'Insert Image', 'i', 'insertimage', 'Enter Image URL:', 'http://'];
		controls['hr'] = [21, 'Insert Horizontal Rule', 'a', 'inserthorizontalrule'];
		controls['link'] = [22, 'Insert Hyperlink', 'i', 'createlink', 'Enter URL:', 'http://'];
		controls['unlink'] = [23, 'Remove Hyperlink', 'a', 'unlink'];
		controls['unformat'] = [24, 'Remove Formatting', 'a', 'removeformat'];

		function isIE() {
			return service.frameDocument.all ? 1 : 0;
		}

		service.createEditor = function(name, obj) {
			service.ie = isIE();

			this.editorName = name;
			this.xhtml = obj.xhtml;

			service.editorDiv = service.frameDocument.createElement('div');
			service.editorIframeContainer = service.frameDocument.createElement('div');
			var tinyeditorHeader = service.frameDocument.createElement('div');
			var l = obj.controls.length;
			var i = 0;

			service.iframe = service.frameDocument.createElement('iframe');
			service.iframe.frameBorder = 0;
			service.iframe.width = obj.width || '500';
			service.iframe.height = obj.height || '250';

			tinyeditorHeader.className = 'teheader badd-avoid-dd';
			service.editorDiv.className = 'te badd-avoid-dd';
			service.editorDiv.style.maxWidth = service.iframe.width + 'px';
			service.editorDiv.appendChild(tinyeditorHeader);

			for (i; i<l; i++) {
				var id = obj.controls[i];
				if (id === 'n') {
					tinyeditorHeader = service.frameDocument.createElement('div');
					tinyeditorHeader.className = 'teheader badd-avoid-dd';
					service.editorDiv.appendChild(tinyeditorHeader);
				} else if(id=='|') {
					var dividerElement = service.frameDocument.createElement('div');
					dividerElement.className = 'tedivider badd-avoid-dd';
					tinyeditorHeader.appendChild(dividerElement);
				} else if (id == 'font') {
					var fontSelectElement = service.frameDocument.createElement('select');
					var fonts = ['Verdana','Arial','Georgia'];
					fontSelectElement.className = 'tefont badd-avoid-dd';
					fontSelectElement.onchange = new Function(service.ddaction(this, 'fontname'));
					fontSelectElement.options[0] = new Option('Font', '');
					fonts.forEach(function(font, index) {
						fontSelectElement.options[index + 1] = new Option(font, font);
					});
					tinyeditorHeader.appendChild(fontSelectElement);
				} else if (id == 'size') {
					var sizeSelectElement = service.frameDocument.createElement('select');
					var sizes = [1,2,3,4,5,6,7];
					sizeSelectElement.className = 'tesize badd-avoid-dd';
					sizeSelectElement.onchange = service.ddaction(sizeSelectElement, 'fontsize');
					sizes.forEach(function (size, index) {
						sizeSelectElement.options[index]= new Option(size, size);
					});
					tinyeditorHeader.appendChild(sizeSelectElement);
				} else if (id == 'style') {
					var styleSelectElement = service.frameDocument.createElement('select');
					var	styles = [
							['Style',''],
							['Paragraph','<p>'],
							['Header 1','<h1>'],
							['Header 2','<h2>'],
							['Header 3','<h3>'],
							['Header 4','<h4>'],
							['Header 5','<h5>'],
							['Header 6','<h6>']
						];

					styleSelectElement.className = 'testyle badd-avoid-dd';
					styleSelectElement.onchange = service.ddaction(styleSelectElement, 'formatblock');
					styles.forEach(function(style, index) {
						styleSelectElement.options[index] = new Option(style[0], style[1]);
					});
					tinyeditorHeader.appendChild(styleSelectElement);
				} else if (controls[id]) {
					var div=service.frameDocument.createElement('div');
					var x = controls[id];
					var func = x[2];
					var ex;
					var pos = x[0] * offset;

					div.className = 'tecontrol badd-avoid-dd';
					div.style.backgroundPosition='0px '+pos+'px';
					div.title=x[1];

					if (func === 'a') {
						ex = service.action(x[3], 0, (x[4] || 0 ));
					} else {
						ex = '.insert("' + x[4] + '", "' + x[5] + '", "' + x[3] + '")';
					}
					div.onclick = ex;
					tinyeditorHeader.appendChild(div);
					if (service.ie) {
						div.unselectable = 'on'
					}
				}
			}
			service.textArea.parentNode.insertBefore(service.editorDiv,service.textArea); service.textArea.style.width=service.iframe.width+'px';
			service.editorIframeContainer.appendChild(service.textArea); service.editorIframeContainer.appendChild(service.iframe); service.editorDiv.appendChild(service.editorIframeContainer); service.textArea.style.display='none';
			service.inlineFrameDocument = service.iframe.contentWindow.document;
			service.inlineFrameDocument.open();
			var html = '<html><head><link rel="stylesheet" href="tinyeditor.min.css" />';

			html += '</head><body id="badd-inline-tinyeditor">' + service.textArea.value;
			html += '</body></html>';
			service.inlineFrameDocument.write(html);
			service.inlineFrameDocument.close();
			service.inlineFrameDocument.designMode='on';

			if (this.xhtml) {
				try {
					service.inlineFrameDocument.execCommand("styleWithCSS", 0, 0);
				} catch (e) {
					try {
						service.inlineFrameDocument.execCommand("useCSS", 0, 1);
					} catch (e) {

					}
				}
			}
		};

		service.action = function(cmd, val, ie) {
			if (ie && !service.ie) {
				alert('Your browser does not support this function.');
			} else {
				return function() {
					service.inlineFrameDocument.execCommand(cmd, 0, val || null);
				}
			}
		};

		service.print = function() {
			service.iframe.contentWindow.print();
		};

		service.ddaction = function(dd, a) {
			return function() {
				var i = dd.selectedIndex;
				var v = dd.options[i].value;
				service.action(a,v)();
			};
		};

		service.insert = function(pro, msg, cmd) {
			var val = prompt(pro, msg);
			if (val != null && val != '') {
				service.inlineFrameDocument.execCommand(cmd, 0, val);
			}
		};

		service.setfont = function() {
			execCommand('formatblock', 0, hType);
		};

		service.resize=function(e){
			if (this.mv) {
				this.freeze();
			}
			service.iframe.bcs = service.cursorTop(e);
			this.mv=new Function('event',this.editorName+'.move(event)');
			this.sr=new Function(this.editorName+'.freeze()');
			if(this.ie){
				service.frameDocument.attachEvent('onmousemove',this.mv); service.frameDocument.attachEvent('onmouseup',this.sr)
			}else{
				service.frameDocument.addEventListener('mousemove',this.mv,1); service.frameDocument.addEventListener('mouseup',this.sr,1)
			}
		};

		service.move = function(e) {
			var pos = service.cursorTop(e);
			service.iframe.height = parseInt(service.iframe.height) + pos - service.iframe.bcs;
			service.iframe.bcs=pos
		};

		service.freeze=function(){
			if(this.ie){
				service.frameDocument.detachEvent('onmousemove',this.mv); service.frameDocument.detachEvent('onmouseup',this.sr)
			}else{
				service.frameDocument.removeEventListener('mousemove',this.mv,1); service.frameDocument.removeEventListener('mouseup',this.sr,1)
			}
		};

		service.cursorTop = function(event) {
			if (isIE()) {
				return service.window.event.clientY + service.frameDocument.documentElement.scrollTop
					+ service.frameDocument.body.scrollTop;
			} else {
				return event.clientY + service.window.scrollY;
			}
		};

		function createDeprectedFooter() {
			service.footerDiv = service.frameDocument.createElement('div');
			service.footerDiv.className = 'tefooter badd-avoid-dd';
			if (obj.toggle) {
				var to=obj.toggle, ts=service.frameDocument.createElement('div');
				ts.className = 'toggle badd-avoid-dd'; ts.innerHTML=to.text||'source';
				ts.onclick=new Function(this.editorName+'.toggle(0,this);return false');
				service.footerDiv.appendChild(ts)
			}
			if (obj.resize) {
				var rs = service.frameDocument.createElement('div');
				rs.className = 'resize badd-avoid-dd';
				rs.onmousedown = new Function('event',this.editorName+'.resize(event);return false');
				rs.onselectstart = function() {
					return false
				};
				service.footerDiv.appendChild(rs);
			}
			service.editorDiv.appendChild(service.footerDiv);
		}
	};
	angular.module('baddEditor').service('tinyEditorService', tinyEditorService);
}());